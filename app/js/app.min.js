'use strict';


// Declare app level module which depends on filters, and services
var kidamom = angular.module('kidamom', [
  'ngRoute',
  'kidamom.filters',
  'kidamom.services',
  'kidamom.directives',
  'kidamom.controllers'
])

.config(["$routeProvider",function($routeProvider){
	$routeProvider
		// .when('/',{controller:"Movies", templateUrl:"partials/movies.html"})
		.when('/search',{controller:"Search", templateUrl:"partials/search.html"})
		.when('/movies/:playlist',{controller:"Movies", templateUrl:"partials/movies.html"})
		.when('/playlists/', {controller:"Playlists", templateUrl:"partials/playlists.html"})
		.when('/users', {controller:"Users", templateUrl:"partials/users.html"})

		.otherwise({redirectTo:'/movies/popular'})

}])



var appURI = {
	search:"sampledata/search.json"
}
'use strict';

/* Controllers */

angular.module('kidamom.controllers', []).
  
  controller('Main', ['$scope', 'depth', function($scope, depth){
  	$scope.scrollH=50; $scope.loggedIn=false;$scope.state=0;

  	$scope.isMenuInactive = function(){
  		if(depth.get()==0)return false;
  		else return true;
  	}
  }]).

  controller('Search', ['$scope','depth','$http', '$rootScope', function ($scope, depth, $http, $rootScope) {
  	
  	$scope.items=[];
  	var tmt = 0;
  	$scope.$watch('s',function () {
  		clearInterval(tmt);
  		if($scope.s.length>0)
  		tmt = setTimeout(function(){
  			$http.get(appURI.search+"?s="+$scope.s).success(function(data) {
				$scope.items = data;
				$scope.currentItemIndex=0;
				$scope.currentItem = data[0];
		  	});
  		},200);
  	})
    $rootScope.$on('keyPressed',function(_e,e){
      if(e.which==13){
        e.preventDefault();
        // window.location.href="";
        depth.more();
        if(depth.get()==1){
          document.getElementById('searchInput').focus();
        }
      }
      else if(e.which==8){
        e.preventDefault();
        depth.less();
      }
    })
  }]).

  controller('Movies', ['$scope','$routeParams', function($scope, $routeParams){
  	$scope.items = [
  		{
  			photo:"/sampledata/1.jpg",
  			title:"The nut job",
  			desc:"Surly, a curmudgeon, independent squirrel is banished from his park and forced to survive in the city. Lucky for him, he stumbles on the one thing that may be able to save his life, and the rest of park community, as they gear up for winter - Maury's Nut Store.",
  			duration:95,
  			age:6
  		},
  		{
  			photo:"/sampledata/2.jpg",
  			title:"Epic",
  			desc:"lorem ipsum some more text here",
  			duration:95,
  			age:6
  		},
  		{
  			photo:"/sampledata/3.jpg",
  			title:"The croods",
  			desc:"lorem ipsum some more text here",
  			duration:95,
  			age:6
  		},
  		{
  			photo:"/sampledata/4.jpg",
  			title:"Cloudy with a chance of meatballs",
  			desc:"lorem ipsum some more text here",
  			duration:95,
  			age:6
  		},
      {
        photo:"/sampledata/3.jpg",
        title:"The croods",
        desc:"lorem ipsum some more text here",
        duration:95,
        age:6
      },
      {
        photo:"/sampledata/4.jpg",
        title:"Cloudy with a chance of meatballs",
        desc:"lorem ipsum some more text here",
        duration:95,
        age:6
      }
  	]

  }]).

  controller('Playlists', ['$scope', function($scope){
  	

  }]).

  controller('Users', ['$scope', function($scope){
  	

  }])
'use strict';

/* Filters */

angular.module('kidamom.filters', []).
  filter('interpolate', ['version', function(version) {
    return function(text) {
      return String(text).replace(/\%VERSION\%/mg, version);
    }
  }]);

'use strict';

/* Directives */


angular.module('kidamom.directives', []).
  directive('appVersion', ['version', function(version) {
    return function(scope, elm, attrs) {
      elm.text(version);
    };
  }])
.directive('shortcut', ['$rootScope',function(rootScope) {
  return {
    restrict: 'E',
    replace: true,
    scope: true,
    link:    function postLink(scope, iElement, iAttrs){
      jQuery(document).on('keydown', function(e){
      	rootScope.$emit('keyPressed',e);
      	scope.$apply();
         // scope.$apply(scope.keyPressed(e));
         // scope.keyCode = e.which;
       });
    }
  };
}])
.directive('mainmenu',['depth','$rootScope',function(depth,rootScope){
	return {
		restrict:"E",
		replace:true,
		template: 
			'<div>'+
			'<ul id="menu" ng-class="{inactive:isMenuInactive()}" style="top:{{-menuItem*50}}px">'+
				'<li ng-repeat="item in menu" ng-class="{current:menuItem==$index}">'+
					'<a><i icon data-index="{{$index}}" class="{{item.icon}}" data-attrs=\'{"transform":"{{item.tsf}}"}\'></i></a>'+
				'</li>'+
			'</ul>'+
			'<div id="titles">'+
				'<h1 ng-repeat="item in menu" ng-class="{current:menuItem==$index}" style="margin-top:{{(-menuItem+$index)*scrollH}}px">'+
				'{{item.title}}</h1>'+
			'</div>'+
			'</div>',
		link:function(scope,el,attrs){
			
			if(scope.loggedIn){
				scope.menu=[
					{
						title:"Search",
						icon:"src", tsf:"s1", href:"#/search"
					},{
						title:"Recommended",
						icon:"v-5", tsf:"s1", href:"#/movies/recommended"
					},{
						title:"Popular",
						icon:"people", tsf:"s1.35", href:"#/movies/popular"
					},{
						title:"New",
						icon:"sticker", tsf:"s1.3", href:"#/movies/new"
					},{
						title:"Last watched",
						icon:"eye", tsf:"s1.2", href:"#/movies/lastwatch"
					},{
						title:"Favorites",
						icon:"heart", tsf:"s1", href:"#/movies/favorites"
					},{
						title:"Playlists",
						icon:"folder", tsf:"s1", href:"#/playlists"
					},{
						title:"Users",
						icon:"logout", tsf:"s1", href:"#/users"
					}
				]
			}
			else {
				scope.menu=[
					{
						title:"Search",
						icon:"src", tsf:"s1", href:"#/search"
					},{
						title:"Popular",
						icon:"people", tsf:"s1.35", href:"#/movies/popular"
					},{
						title:"New",
						icon:"sticker", tsf:"s1.3", href:"#/movies/new"
					},{
						title:"Users",
						icon:"logout", tsf:"s1", href:"#/users"
					}
				]
			}
			scope.menuItem=1;
			rootScope.$on('keyPressed',function(_e,e){
				if(depth.get()==0){
					if(e.which==38){
						//up
						if(scope.menuItem>0){
							scope.menuItem--;
							clearInterval(scope.tmt);
							scope.tmt = setTimeout(function(){
								window.location.href=scope.menu[scope.menuItem].href;
							},300);
						}
			  		}
			  		else if(e.which==40){
			  			//down 
			  			if(scope.menuItem<scope.menu.length-1){
			  				scope.menuItem++;
							clearInterval(scope.tmt);
							scope.tmt = setTimeout(function(){
								window.location.href=scope.menu[scope.menuItem].href;
							},300);
						}
			  		}
			  	}
			})
		}
	}
}])
.directive('icon',function(){
	return {
		restrict:"A",
		link:function link (scope,el,attrs) {
			// attrs.icon
			scope.$watch('menuItem',function(newVal,oldVal){
				if(attrs.index==oldVal){
					if(el.data('svg'))
					el.data('svg').animate({fill:"#5b5b5b"},300)
				}
				else if(attrs.index==newVal){
					if(el.data('svg'))
					el.data('svg').animate({fill:"#ff2e43"},300)

				}
			})
		}
	}
}).

directive('carousel', ['$rootScope',function (rootScope) {
	return {
		restrict: 'E',
		template:
			'<div class="carousel">'+
				'<div class="holder" style="width:{{items.length*180+160+125}}px; margin-left:{{-currentItemIndex*180-135}}px">'+
					'<div class="item" ng-repeat="item in items" ng-class="{current:(item==currentItem)}">'+
						'<img ng-src="{{item.photo}}">'+
					'</div>'+
				'</div>'+
			'</div>',
		link: function (scope, iElement, iAttrs) {
			scope.currentItemIndex=0;
			scope.currentItem = scope.items[0];
			rootScope.$on('keyPressed', function(_e,e){
				if(e.which==37){
		  			scope.currentItemIndex--;
		  			if(scope.currentItemIndex<0)scope.currentItemIndex=0;
		  		}
		  		else if(e.which==39){
		  			scope.currentItemIndex++;
		  			if(scope.currentItemIndex>=scope.items.length)scope.currentItemIndex=scope.items.length-1;
		  		}
		  		scope.currentItem = scope.items[scope.currentItemIndex];
			})
		}
	};
}])
'use strict';

/* Services */


// Demonstrate how to register services
// In this case it is a simple value service.
angular.module('kidamom.services', []).
  value('version', '0.1').

  service('depth', [function () {
  	var state = 0, maxState = 3;
  	return {
  		more:function(){
  			state++;
  			if(maxState<state)state = maxState;
  		},
  		less:function(){
  			state--;
  			if(state<0)state=0;
  		},
  		get:function(){
  			return state;
  		}
  	}
  }])
